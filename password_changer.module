<?php
// $Id$

/**
 * @file
 * FHCHS Universal Password Changer
 *
 * Main Module file.
 * 
 */
function password_changer_menu() {
  $items['admin/user/password_changer'] = array(
    'title' => t('Password Changer Settings'),
    'description' => t('Configure the Settings for the Password Changer'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('password_changer_admin_page'),
    'access arguments' => array('administer password changer'),
    'file' => 'password_changer_admin_page.inc',
    'file path' => drupal_get_path('module', 'password_changer'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

function password_changer_perm() {
  return array('administer password changer');
}

/**
 * Implementation of hook_hook_info().
 */
function password_changer_hook_info() {
  return array(
    'password_changer' => array(
      'password_changer' => array(
        'reset' => array(
          'runs when' => t('After password has been reset'),
        ),
        'changed' => array(
          'runs when' => t('After password has been changed'),
        ),
      ),
    ),
  );
}

/**
 * Implementation of hook_password_changer_started().
 */
function password_changer_password_changer_changed($op, $user) {
  // We support a subset of operations.
  if (!in_array($op, array('reset', 'changed'))) {
    return;
  }
  $aids = _trigger_get_hook_aids('password_changer', $op);
  $context = array(
    'hook' => 'password_changer',
    'op' => $op,
    'user' => $user,
  );
  actions_do(array_keys($aids), $user, $context);
}

/**
 * Implementation of hook_info_alter().
 */
function password_changer_action_info_alter(&$info) {
  foreach ($info as $type => $data) {
    if (stripos($type, "user_") === 0 || stripos($type, "system_") === 0) {
      if (isset($info[$type]['hooks']['password_changer'])) {
        array_merge($info[$type]['hooks']['password_changer'], array('reset', 'changed'));
      }
      else {
        $info[$type]['hooks']['password_changer'] = array('reset', 'changed');
      }
    }
  }
}

/**
 * Implementation of hook_action_info().
 */
function password_changer_action_info() {
  return array(
    'password_changer_logout_user_action' => array(
      'description' => t('Logout current user'),
      'type' => 'reset',
      'configurable' => FALSE,
      'hooks' => array('reset' => array('reset', 'changed')),
    ),
    'password_changer_send_curret_user_email_action' => array(
      'description' => t('Send current user an e-mail'),
      'type' => 'reset',
      'configurable' => TRUE,
      'hooks' => array('reset' => array('reset', 'changed')),
    ),
  );
}

/**
 * Implementation of a Drupal action.
 * Logs out the current user.
 */
function password_changer_logout_user_action(&$object, $context = array()) {
  if (isset($object->uid)) {
    $uid = $object->uid;
  }
  elseif (isset($context['uid'])) {
    $uid = $context['uid'];
  }
  else {
    global $user;
    $uid = $user->uid;
  }
  session_destroy();
  module_invoke_all('user', 'logout', NULL, $user);
  $user = drupal_anonymous_user();
  watchdog('action', 'Session logged out for %name.', array('%name' => $user->name));
}

/**
 * Return a form definition so the Send email action can be configured.
 *
 * @see password_changer_send_curret_user_email_action_validate()
 * @see password_changer_send_curret_user_email_action_submit()
 * @param $context
 *   Default values (if we are editing an existing action instance).
 * @return
 *   Form definition.
 */
function password_changer_send_curret_user_email_action_form($context) {
  if (!isset($context['subject'])) {
    $context['subject'] = '';
  }
  if (!isset($context['message'])) {
    $context['message'] = '';
  }

  $form['subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#default_value' => $context['subject'],
    '#maxlength' => '254',
    '#description' => t('The subject of the message.'),
  );
  $form['message'] = array(
    '#type' => 'textarea',
    '#title' => t('Message'),
    '#default_value' => $context['message'],
    '#cols' => '80',
    '#rows' => '20',
    '#description' => t('The message that should be sent. You may include the following variables: %site_name, %username, %node_url, %node_type, %title, %teaser, %body. Not all variables will be available in all contexts.'),
  );
  return $form;
}

/**
 * Process system_send_email_action form submissions.
 */
function password_changer_send_curret_user_email_action_submit($form, $form_state) {
  $form_values = $form_state['values'];
  // Process the HTML form to store configuration. The keyed array that
  // we return will be serialized to the database.
  $params = array(
    'subject'   => $form_values['subject'],
    'message'   => $form_values['message'],
  );
  return $params;
}

/**
 * Implementation of a configurable Drupal action. Sends an email.
 */
function password_changer_send_curret_user_email_action($object, $context) {
  global $user;

  switch ($context['hook']) {
    case 'nodeapi':
      // Because this is not an action of type 'node' the node
      // will not be passed as $object, but it will still be available
      // in $context.
      $node = $context['node'];
      break;
    // The comment hook provides nid, in $context.
    case 'comment':
      $comment = $context['comment'];
      $node = node_load($comment->nid);
      break;
    case 'user':
      // Because this is not an action of type 'user' the user
      // object is not passed as $object, but it will still be available
      // in $context.
      $account = $context['account'];
      if (isset($context['node'])) {
        $node = $context['node'];
      }
      elseif ($context['recipient'] == '%author') {
        // If we don't have a node, we don't have a node author.
        watchdog('error', 'Cannot use %author token in this context.');
        return;
      }
      break;
    default:
      // We are being called directly.
      $node = $object;
  }

  $recipient = $user->mail;

  if (isset($node)) {
    if (!isset($account)) {
      $account = user_load(array('uid' => $node->uid));
    }
  }

  if (!isset($account)) {
    $account = $user;

  }
  $language = user_preferred_language($account);
  $params = array('account' => $account, 'object' => $object, 'context' => $context);
  if (isset($node)) {
    $params['node'] = $node;
  }

  if (drupal_mail('system', 'action_send_current_user_email', $recipient, $language, $params)) {
    watchdog('action', 'Sent email to %recipient', array('%recipient' => $recipient));
  }
  else {
    watchdog('error', 'Unable to send email to %recipient', array('%recipient' => $recipient));
  }
}

/**
 * Implementation of hook_mail().
 */
function password_changer_mail($key, &$message, $params) {
  $account = $params['account'];
  $context = $params['context'];
  $variables = array(
    '%site_name' => variable_get('site_name', 'Drupal'),
    '%username' => $account->name,
  );
  if ($context['hook'] == 'taxonomy') {
    $object = $params['object'];
    $vocabulary = taxonomy_vocabulary_load($object->vid);
    $variables += array(
      '%term_name' => $object->name,
      '%term_description' => $object->description,
      '%term_id' => $object->tid,
      '%vocabulary_name' => $vocabulary->name,
      '%vocabulary_description' => $vocabulary->description,
      '%vocabulary_id' => $vocabulary->vid,
    );
  }

  // Node-based variable translation is only available if we have a node.
  if (isset($params['node'])) {
    $node = $params['node'];
    $variables += array(
      '%uid' => $node->uid,
      '%node_url' => url('node/'. $node->nid, array('absolute' => TRUE)),
      '%node_type' => node_get_types('name', $node),
      '%title' => $node->title,
      '%teaser' => $node->teaser,
      '%body' => $node->body,
    );
  }
  $subject = strtr($context['subject'], $variables);
  $body = strtr($context['message'], $variables);
  $message['subject'] .= str_replace(array("\r", "\n"), '', $subject);
  $message['body'][] = drupal_html_to_text($body);
}
