<?php
/**
* @file
* Let users change password in different systems.
*
* Allow user to change password in different systems.
* This module requires a sub-module to change password in
* individual systems.
*/


include_once ( dirname(__FILE__) . '/password_changer_api.inc' );
include_once ( dirname(__FILE__) . '/password_changer_api_complexity.inc' );

/**
 * Implements hook_permission().
 */
function password_changer_api_permission() {
  return array(
    'administer password changer' => array(
      'title' => t('administer password changer'),
      'description' => t('Administer password changer API and any password changer sub-module.'),
    ),
  );
}


/**
 * Register sub-submodule to use the password changer API.
 *
 * @param string $name
 *   The name that the sub-module is that is going to be register.
 *
 * @param string $description
 *   The sub-module (system) description.
 *
 * @param string $optional_link
 *   Optional link to be display if password changer fails to change password. 
 *  
 */

function password_changer_api_register_submodule($system, $complexity) {
 
 try {
  //Install module
  _password_changer_api_add_system($system, $complexity);
  
  //Check for global conflicts
  _password_changer_api_check_global_conflicts();
  
  //Allow other user to add code to check for global conflicts.
  //module_invoke_all('_password_changer_api_check_global_conflicts');
  
  //Allow other user to add code
  module_invoke_all('password_changer_api_register_submodules');
 }
 catch ( passwordChangerApiExeption $e) {
  
   //Set Drupal message error  
   drupal_set_message($e->getMessage() , 'error');
   
   //Log exception
   watchdog($system['#module_name'] , $e->getMessage());
   
   //Uninstall module if module has been install
   drupal_uninstall_modules(array($system['#module_name']));
   
   //Remove module from the system table
   $num_deleted = db_delete('system')
    ->condition('name', $system['#module_name'])
    ->execute();
   
 }
}

/**
 * Unregistered sub-submodule to use the password changer API.
 *
 * @param string $name
 *   The name of the sub-module.
 *  
 */

function password_changer_api_unregister_submodule($name) {
 
 //Uninstall module.
 _password_changer_api_remove_system($name);
 
 //Allow other user to add code when the API is being un-install
 module_invoke_all('password_changer_api_unregister_submodule');
 
}

//User profile form related functions.

/**
 * Render a list of check box of the systems register to change password.
 *
 * Render a list of check box and it adds it to form passed in the parameter
 * given a list of the register modules.
 * 
 * @param array &$form
 *   The form were the list of check box is going to be added.
 *
 * @param array $register_modules
 *   An array with all register modules information. Information could be
 *   name, description and optional link for all systems.
 *   
 */

function password_changer_api_render_checkbox_list(&$form, $register_modules) {
  
 //Flag view password changer collpasable box
 $show_collapsable_box = FALSE;
  
 //If there is no system register don't display field set
 if (empty($register_modules)) {
   return;
 }
 
 //Clearing the module list of the user
 if (isset($_SESSION['permission_modules'])) {
  unset($_SESSION['permission_modules']);
 }
 
 //Create field set to display systems to display system to change passwords
 
  $form['systems'] = array(
     '#title' => t('Change Password in These Systems'),
     '#type' => 'fieldset',
     '#collapsible' => TRUE,
     '#collapsed' => FALSE,
     '#weight' => -15,
   );
  
  //Display register system in the field set that user has an account
  if (!empty($register_modules)) {
   
    foreach ($register_modules AS $module_name => $properties) {
     if(_password_changer_api_check_user($module_name, $form['#user']->name)) {
      //Add system to session variable
      $_SESSION['permission_modules'][] = $module_name; 
      $form['systems']['system_'.$module_name] = array(                                                                                                                               
      '#type' => 'checkbox',
      '#title' => (is_null($properties['#optional_link']) || $properties['#optional_link'] == '' )?
                   t($properties['#title']) : l($properties['#title'], $properties['#optional_link']),
      '#description' => t($properties['#description']),
      '#default_value' => TRUE,
      );
      $show_collapsable_box = TRUE;
     } 
    }
  }
   //If password changer colapsable box is empty remove it from the form
  if(!$show_collapsable_box) {
   
    unset($form['systems']);
    
  }
  
  //Submit and validate function for content added by the password changer API
  $form['#validate'][] = 'password_changer_api_form_user_profile_form_validate';
  $form['#submit'][] = 'password_changer_api_form_user_profile_form_submit';
  
}
 
/**
 * Implement the hook form_user_profile_form_alter()
 */
function password_changer_api_form_user_profile_form_alter(&$form, &$form_state) {
  
   //Get register modules.
   $register_modules = variable_get('password_changer_api_register_modules', array());
   
   
   //Render check box for system that the user has access.
   password_changer_api_render_checkbox_list($form, $register_modules);
   
   
   //If password changer colapsable box is present display message.
   if (isset($form['systems'])) {
    
    $form['admin_message'] = array(
                                  '#markup' => variable_get('password_changer_api_admin_message','Testing'),
                                  '#weight' => -17,
                                  );
   
   }
   
}

/**
 * Validating and submitting
 */
function password_changer_api_form_user_profile_form_validate($form, &$form_state) {
 
 //Get register modules.
 $register_modules = variable_get('password_changer_api_register_modules', array());
 
 //Get user new password.
 $password = $form_state['values']['pass'];
 
 //Get user name 
 $user_name = $form['#user']->name;
 
 //Get current password if is set
 $current_password = (isset($form['#user']->current_pass))?$form['#user']->current_pass:NULL;
 
 //Check for complexity issues
 try {
  //Check password complexity and set form error is there is an issue with the password
  //complexity
   password_changer_api_check_complexity($password);
      
  //Change password that must change and if does not set a form error
  foreach( $_SESSION['permission_modules'] AS $index => $module_name )  {
   
   if( $register_modules[$module_name]['#must_change']  == 1 ) {
    
    //Place change password call in array to call later
    $batch_calls[] = array('_password_changer_api_change_password',
                       array($module_name, $user_name, $password, $current_password));
   }
   //Check if calls have been set
   if (isset($batch_calls)) {
     //Setting the batch process
     $batch = array('title'=> t('Changing Passwords'),
                   'operations' => $batch_calls,
                   'init_message'=> 'Starting to change password.',
                   'progress_message'=> 'Your password is being changed.',
                   'error_message'=>'Sorry password was not changed try again later or ask system adminstrator.'
                   );
     
    //Set batch process 
    batch_set($batch);
    
    //execute batch process
    batch_process();
   }
  }
 } //Set form error
 catch( passwordChangerApiExeption $e ) {
 
  form_set_error('user_profile_form',$e->getMessage());
  
 }
}

/**
 *  Implementing hook_submit
 */

function password_changer_api_form_user_profile_form_submit($form, &$form_state) {
 
 
 //Get user name 
 $user_name = $form['#user']->name;
 $password = $form['#user']->pass;
 $current_password = (isset($form['#user']->current_pass))?$form['#user']->current_pass:NULL;
 

 
 //Get register modules
 $register_modules = variable_get('password_changer_api_register_modules', array());
 
 try  {
   //for each system that is not must change.
   foreach ($form['systems'] AS $module_name => $property) {
   // change password the hook has to return a status object
    $name = ltrim($module_name, 'system_');
    
    if(isset($register_modules[$name]['#must_change'])) {
     $must_change = ($register_modules[$name]['#must_change'] == 1)? TRUE : FALSE;
    }
    else {
     $must_change = FALSE;
    }
    
    if ((strstr($module_name, 'system_') != FALSE) && ($must_change == FALSE)) {
     
   
      //password_changer_api_change_password($name, $user_name, $password, $current_password);
      
      $batch_calls[] = array('_password_changer_api_change_password',
                       array($name, $user_name, $password, $current_password));
      
      
      
    }
   }
   //Check if calls have been set
   if (isset($batch_calls)) {
     //Setting the batch process
     $batch = array('title'=> t('Changing Passwords'),
                   'operations' => $batch_calls,
                   'init_message'=> 'Starting to change password.',
                   'progress_message'=> 'Your password is being changed.',
                   'error_message'=>'Sorry password was not changed try again later or ask system adminstrator.'
                   );
     
    //Set batch process 
    batch_set($batch);
    
    //execute batch process
    batch_process();
   }  
 }
 catch (passwordChangerApiExeption $e)  {
  //Show message 
  drupal_set_message($e->getMessage());
 }
}


function password_changer_api_menu() {
 
  
  $items['admin/config/password_changer'] = array(
    'title' => 'Password Changer API Settings',
    'page callback' => 'drupal_get_form',
    'access callback' => TRUE,
    'page arguments' => array('password_changer_api_admin_message_page'),
    'access arguments' => array('administer password changer'),
    'type' => MENU_NORMAL_ITEM,
  );
  
  
  return $items;
 
}



/**
 *  Display form to set password changer API admin message.
 *  
 *  Display form to set password chagner API admin message to be display
 *  on the user profile form.
 *
 *  @return form to be display.
 *
 */
function password_changer_api_admin_message_page($form, &$form_state) {
     
  //get persistent variable from the variable table in the Drupal DB
  $settings = variable_get('password_changer_google_domains', array());

 
  //give the form a name
  $form['#attributes'] = array('name' => 'password_changer_api_settings');
 
   
  //display the domain label field with the filed to enter domain
  $form['admin_message'] = array(
    '#type' => 'textarea',
    '#title' => t('Password Changer API Administrator Message:'),
    '#size' => 60,
    '#required' => FALSE,
    '#default_value' => variable_get('password_changer_api_admin_message', '') ,
    '#description' => t('This message would display in the form were the user changes his/her password (user profile form).'),
  );
  
  //display submit button
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save Message'),
   );
  
  //Return 
  return $form;
 
}

/**
 * Implement hook_submit for the admin form. 
 */
function password_changer_api_admin_message_page_submit($form, &$form_state) {
 //Get value
 $admin_message = $form_state['values']['admin_message'];
 //Save message
 password_changer_api_save_admin_message($admin_message);
 //Send message to user
 drupal_set_message("Your administrator message has been saved.
                    This message would display in the form were the user changes his/her password (user profile form).",
                    'status');
 
 
}

