<?php
/**
* @file
* Let users change password in different systems.
*
* Allow user to change password in different systems.
* This module requires a sub-module to change password in
* individual systems.
*/


include_once ( dirname(__FILE__) . '/password_changer_api.inc' );
include_once ( dirname(__FILE__) . '/password_changer_api_complexity.inc' );

/**
 * Implements hook_permission().
 */
function password_changer_api_permission() {
  return array(
    'administer password changer' => array(
      'title' => t('administer password changer'),
      'description' => t('Administer password changer API and any password changer sub-module.'),
    ),
  );
}



/******
*
* Redirect user to profile page when they come to the
* password changer site.
* 
*/

function password_changer_api_redirect() {

  global $user;
  
  drupal_goto('user/' . $user->uid . '/edit');

}

/**
 * Register sub-submodule to use the password changer API.
 *
 * @param string $name
 *   The name that the sub-module is that is going to be register.
 *
 * @param string $description
 *   The sub-module (system) description.
 *
 * @param string $optional_link
 *   Optional link to be display if password changer fails to change password. 
 *  
 */

function password_changer_api_register_submodule($system, $complexity) {
 
 try {
  //Install module
  _password_changer_api_add_system($system, $complexity);
  
  //Check for global conflicts
  _password_changer_api_check_global_conflicts();
  
  //Allow other user to add code to check for global conflicts.
  //module_invoke_all('_password_changer_api_check_global_conflicts');
  
  //Allow other user to add code
  module_invoke_all('password_changer_api_register_submodules');
 }
 catch ( passwordChangerApiExeption $e) {
  
   //Set Drupal message error  
   drupal_set_message($e->getMessage() , 'error');
   
   //Log exception
   watchdog($system['#module_name'] , $e->getMessage());
   
   //Uninstall module if module has been install
   drupal_uninstall_modules(array($system['#module_name']));
   
   //Remove module from the system table
   $num_deleted = db_delete('system')
    ->condition('name', $system['#module_name'])
    ->execute();
   
 }
}

/**
 * Unregistered sub-submodule to use the password changer API.
 *
 * @param string $name
 *   The name of the sub-module.
 *  
 */

function password_changer_api_unregister_submodule($name) {
 
 //Uninstall module.
 _password_changer_api_remove_system($name);
 
 //Allow other user to add code when the API is being un-install
 module_invoke_all('password_changer_api_unregister_submodule');
 
}

//User profile form related functions.

/**
 * Render a list of check box of the systems register to change password.
 *
 * Render a list of check box and it adds it to form passed in the parameter
 * given a list of the register modules.
 * 
 * @param array &$form
 *   The form were the list of check box is going to be added.
 *
 * @param array $register_modules
 *   An array with all register modules information. Information could be
 *   name, description and optional link for all systems.
 *   
 */

function password_changer_api_render_checkbox_list(&$form, $register_modules) {
  
 //Flag view password changer collpasable box
 $show_collapsable_box = FALSE; 
  
 //If there is no system register don't display field set
 if (empty($register_modules)) {
   return;
 }
 
 //Clearing the module list of the user
 if (isset($_SESSION['permission_modules'])) {
  unset($_SESSION['permission_modules']);
 }
 
 //Create field set to display systems to display system to change passwords
 
  $form['systems'] = array(
     '#title' => t('Change Password in These Systems'),
     '#type' => 'fieldset',
     '#collapsible' => TRUE,
     '#collapsed' => FALSE,
     '#weight' => -15,
   );
  
  //Display register system in the field set that user has an account
  if (!empty($register_modules)) {
    
    foreach ($register_modules AS $module_name => $properties) {
      if(_password_changer_api_check_user($module_name, $form['#user']->name)) {
       //Add system to session variable
       $_SESSION['permission_modules'][] = $module_name; 
       $form['systems']['system_'.$module_name] = array(                                                                                                                               
       '#type' => 'checkbox',
       '#title' => (is_null($properties['#optional_link']) || $properties['#optional_link'] == '' )?
                    t($properties['#title']) : l($properties['#title'], $properties['#optional_link']),
       '#description' => t($properties['#description']),
       '#default_value' => TRUE,
       );
       $show_collapsable_box = TRUE;
      }
    }
  }
  
   //If password changer colapsable box is empty remove it from the form
  if(!$show_collapsable_box) {
   
    unset($form['systems']);
    
  }
  
  //Submit and validate function for content added by the password changer API
  $form['#validate'][] = 'password_changer_api_form_user_profile_form_validate';
  $form['#submit'][] = 'password_changer_api_form_user_profile_form_submit';
  
}
 
/**
 * Implement the hook form_user_profile_form_alter()
 */
function password_changer_api_form_user_profile_form_alter(&$form, &$form_state) {
  
  
   //Get register modules.
   $register_modules = variable_get('password_changer_api_register_modules', array());
   
   $form['other_system'] = array(
     '#title' => t('Other Systems'),
     '#type' => 'fieldset',
     '#collapsible' => TRUE,
     '#collapsed' => TRUE,
     '#weight' => -14,
   );
   
   $form['other_system']['admin_message'] = array(
                                  '#markup' => variable_get('password_changer_api_admin_message',''),
                                  );
   
  
   //Render check box for system that the user has access.
   password_changer_api_render_checkbox_list($form, $register_modules);
   
   //Don't make password required for password changer
   $form['account']['mail']['#access'] = 0;
   
   if(!eregi("^[_a-z0-9-]+(\.[_a-z0-9-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,3})$", $form['account']['mail']['#default_value'])) {
    
     $ramdom_email = password_changer_api_generate_random_string() . '@dummy.fhchs.edu';
    
     $form['account']['mail']['#default_value'] = $ramdom_email;
   
   }
   
}

/**
 * Validating and submitting
 */
function password_changer_api_form_user_profile_form_validate($form, &$form_state) {
  
  //if pass set try to change password
  if( strlen($form_state['values']['pass'])  > 0 ) {
    
    //Get user 
    $password = $form_state['values']['pass'];
    $user_name = $form['#user']->name;  
    $current_password = (isset($form['account']['current_pass']['#value']))?$form['account']['current_pass']['#value']:NULL;
    
   
    //Check for complexity issues
    try {
      //Check password complexity and set form error is there is an issue with the password
      //complexity 
      if($form_state['values']['submit'] == 'Save') {
        password_changer_api_check_complexity($password);
      }  
    }  
    catch (passwordChangerApiExeption $e)  {
      //Show message 
      form_set_error('Password Complexity Issues',$e->getMessage());
    }
  }  
}

/**
 *  Implementing hook_submit
 */

function password_changer_api_form_user_profile_form_submit($form, &$form_state) {

  //if password is greater than zero lenth then try
  //to change it
  if( strlen($form['#user']->pass) > 0 ) {
  
    //Get user name 
    $user_name = $form['#user']->name;
    $password = $form['#user']->pass;
    $current_password = (isset($form['account']['current_pass']['#value']))?$form['account']['current_pass']['#value']:NULL;
    
     
   
    //Set user values
    $_SESSION['user_name'] = $user_name;
     
    //Set user with current password to avoid confusion
    $_SESSION['current_password'] = $current_password;
                                  
   
   
  
    //Get register modules
    $register_modules = variable_get('password_changer_api_register_modules', array());
    
    if(isset($form['systems'] )) {
     
     //for each system that is not must change.
     foreach ($form['systems'] AS $module_name => $property) {
       
       //Change password the hook has to return a status object
       $name = ltrim($module_name, 'system_');
        
       if(isset($register_modules[$name]['#must_change'])) {
         $must_change = ($register_modules[$name]['#must_change'] == 1)? TRUE : FALSE;
       }
       else {
         $must_change = FALSE;
       }
       
       if($must_change === TRUE) {
         
         if($property['#value'] ==  1 ) { 
          
            _password_changer_api_change_password($name, $user_name, $password, $current_password);
              
         }  
       }
      }//Foreach ...
    }  
    
    try {
     
     //Check if user has account in any given system
     if(isset($form['systems'] )) {
       
       //for each system that is not must change.
       foreach ($form['systems'] AS $module_name => $property) {
       
         // change password the hook has to return a status object
         $name = ltrim($module_name, 'system_');
          
         if(isset($register_modules[$name]['#must_change'])) {
           $must_change = ($register_modules[$name]['#must_change'] == 1)? TRUE : FALSE;
         }
         else {
           $must_change = FALSE;
         }
          
         if ((strstr($module_name, 'system_') != FALSE) && ($must_change == FALSE)) {
           if($property['#value'] ==  1 ) {
              
             $batch_calls[] = array('_password_changer_api_change_password',
                               array($name, $user_name, $password, $current_password));
             
             //_password_changer_api_change_password($name, $user_name, $password, $current_password);
             
           }    
         }
       }  
     }
    
      //Check if calls have been set
     if (isset($batch_calls)) {
        //Setting the batch process
        $batch = array('title'=> t('Changing Passwords'),
                      'operations' => $batch_calls,
                      'init_message'=> 'Starting to change password.',
                      'progress_message'=> 'Your password is being changed.',
                      'error_message'=>'Sorry password was not changed try again later or ask system adminstrator.',
                      'finished' => '_password_changer_api_result_page'
                      );
        
       //Set batch process 
       batch_set($batch);
     
       //execute batch process
       batch_process();
      }
    }
    catch (passwordChangerApiExeption $e)  {
      
      //Save changes to watchdog
      watchdog('[password_changer_api_module][hook_submit]', $e->getMessage(), WATCHDOG_ERROR);
                                  
      //Goto drupal node
      _password_changer_api_result_page();
      
    }
   
  }#end if
  
   _password_changer_api_result_page();
  
}


/**
 * Display password changer status.
 *
 * Display password chager status if errors there were errors clear
 * status from drupal core and just display errors and set passwords to
 * previous password, else display success messages.
 *
 * NOTE: This function is a last minute hack that could  be
 * refactor in later versions of the password changer.
 * 
 */

function _password_changer_api_result_page() {
  
  //Get log in user
  global $user;
    
  //Check if user name is set in the session and current user
  //from the sessions
  if (isset($_SESSION['user_name'])) {
    
      //Get current user id 
      $curr_uid = db_query('SELECT `uid` FROM {users} WHERE `name` = :name LIMIT 0,1',
                    array(':name' => $_SESSION['user_name']))->fetchField();
      
      //If user id was found for user
      if (strlen($curr_uid) > 0) {
        
        //Save user current password
        $curr_user = user_load($curr_uid);
      }
      else {
        //Error log to watchdog
        watchdog('[password_changer_api_module][_password_changer_api_result_page]',
                 'Current user %user_name was not found in the database.',
                  array('%user_name' => $_SESSION['user_name']), WATCHDOG_ERROR);
        
      }
  }
  
  //If active directory has not change revert password of Drupal Seven site
  //to previous password
  if (isset($_SESSION['current_password']) && is_object( $curr_user)) {
    if (isset($_SESSION['messages']['status'])) {       
      if (!in_array('Active Directory password has been changed.', $_SESSION['messages']['status'])) {
         if (! is_null($_SESSION['current_password'])) {
            
            //Set user with current password to avoid confusion
             $edit['pass']   = $_SESSION['current_password'];
                          
             //Save password
             user_save($curr_user, $edit);
             //Log change in 
             watchdog('[password_changer_api_module][_password_changer_api_result_page]',
                      'Password has been set to previous password for user %user_name',
                      array('%user_name' => $curr_user->name), WATCHDOG_DEBUG);
         }    
      }
    }  
  }
  
  //Check if there were errors
  if (isset($_SESSION['messages']['error'])) {
    //Check if passwords were set in SESSION to reset it to previous   
    //Unset variables
    unset($_SESSION['user_name']);
    unset($_SESSION['current_password']);
    unset($_SESSION['messages']['status']);
    drupal_goto('node/2');
  }
  else {
    
    watchdog('[password_changer_api_module][_password_changer_api_result_page]',
              'Password changed succesfully for user ' . $_SESSION['user_name'],
               WATCHDOG_DEBUG);
     
    //Unset previous password and sent to node one
    unset($_SESSION['user_name']);
    unset($_SESSION['current_password']);
    
    //If user administrator or passsword changer user don't
    //terminate session
    if (!in_array('administrator', $user->roles)  && !in_array('password changer admin',$user->roles)) {
      
      //Destroy session
      session_destroy();
      
      //if current user is an object 
      if (is_object($curr_user)) {
         module_invoke_all('user_logout', $curr_user);      
      }
    }  
  
    //Send user to node for success page
    drupal_goto('node/1');
  }
  
}

function password_changer_api_menu() {
 
  $items = array();

  $items['password_changer'] = array(
                                 'title' => 'Change Password',
                                 'access callback' => TRUE,
                                 'page callback' => 'password_changer_api_redirect',
                                 'type' => MENU_CALLBACK, );
  
  
  $items['admin/config/password_changer'] = array(
    'title' => 'Password Changer API Settings',
    'page callback' => 'drupal_get_form',
    'access callback' => TRUE,
    'page arguments' => array('password_changer_api_admin_message_page'),
    'access arguments' => array('administer password changer'),
    'type' => MENU_NORMAL_ITEM,
  );
  
  return $items;
 
}

/**
 *  Display form to set password changer API admin message.
 *  
 *  Display form to set password chagner API admin message to be display
 *  on the user profile form.
 *
 *  @return form to be display.
 *
 */
function password_changer_api_admin_message_page($form, &$form_state) {
     
  //get persistent variable from the variable table in the Drupal DB
  $settings = variable_get('password_changer_google_domains', array());

 
  //give the form a name
  $form['#attributes'] = array('name' => 'password_changer_api_settings');
 
   
  //display the domain label field with the filed to enter domain
  $form['admin_message'] = array(
    '#type' => 'textarea',
    '#title' => t('Password Changer API Administrator Message:'),
    '#size' => 60,
    '#required' => FALSE,
    '#default_value' => variable_get('password_changer_api_admin_message', '') ,
    '#description' => t('This message would display in the form were the user changes his/her password (user profile form).'),
  );
  
  //display submit button
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save Message'),
   );
  
  //Return 
  return $form;
 
}

/**
 * Implement hook_submit for the admin form. 
 */

function password_changer_api_admin_message_page_submit($form, &$form_state) {
 //Get value
 $admin_message = $form_state['values']['admin_message'];
 //Save message
 password_changer_api_save_admin_message($admin_message);
 //Send message to user
 drupal_set_message("Your administrator message has been saved.
                    This message would display in the form were the user changes his/her password (user profile form).",
                    'status');
 
}

