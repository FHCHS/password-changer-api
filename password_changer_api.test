<?php
// $Id: password_changer_api.test,v 0.1 2011/01/27 23:28:11 arod Exp $

/**
 * @file
 * Test case for Testing the page example module.
 *
 * This file contains the test cases to check if module is performing as
 * expected.
 *
 */
//Include files

//Installing module if I can use the 
module_load_include('module', 'password_changer_api', 'password_changer_api');
module_load_include('inc','password_changer_api','password_changer_api');
module_load_include('inc','password_changer_api','password_changer_api_complexity');

//Extends DrupalWebTestCase to get database connection
class PasswordChangerAPICase extends DrupalWebTestCase  {


  public static function getInfo() {
    return array(
      'name' => 'Password Changer API',
      'description' => 'Test password changer class and functions.',
      'group' => 'Password Changer',
    );
  }
  
  function setUp() {
    parent::setUp();

  }
    
  // Test Case 1.4  
  function testSubModuleRegistration() {
  
    
     //Register new sub-module password_changer_google 
     $system = array( '#module_name' => 'password_changer_google',
                     '#title'       => 'Google System',
                     '#description' => 'Change Google password.',
                     '#optional_link' => 'https://www.google.com/a/employee.fhchs.edu',
                     '#must_change' => FALSE, );
     //Register new sub-module complexity
     $complexity = array( 'max_length' => array( 'value' => 6,
                                                 'error_message' => 'The password maximum length should be eight.'),
                          'min_length' => array( 'value' => 3,
                                                 'error_message' => 'The password needs to be at least three character long.'),
                          'digit' => array('value' => 2,
                                          'error_message' => 'Password needs to have at least two digit.'),
                          'symbols' => array('value' => 0,
                                             'error_message' => 'Password can\'t have symbols '));
              
    //Register sub-module password_changer_google  
    password_changer_api_register_submodule($system, $complexity);
    
    $register_modules = password_changer_api_get_register_modules();
    
    $this->assertFalse(empty($register_modules), 'They are register modules install.');
    
    $this->assertTrue(isset($register_modules['password_changer_google']), 'The sub-module password_changer_google is install.');
    
  }

  // Test Case 1.5
  function testSubModuleUnregister() {
    
    
    //Register new sub-module password_changer_google 
     $system = array( '#module_name' => 'password_changer_google',
                     '#title'       => 'Google System',
                     '#description' => 'Change Google password.',
                     '#optional_link' => 'https://www.google.com/a/employee.fhchs.edu',
                     '#must_change' => FALSE, );
     //Register new sub-module complexity
     $complexity = array( 'max_length' => array( 'value' => 6,
                                                 'error_message' => 'The password maximum length should be eight.'),
                          'min_length' => array( 'value' => 3,
                                                 'error_message' => 'The password needs to be at least three character long.'),
                          'digit' => array('value' => 2,
                                          'error_message' => 'Password needs to have at least two digit.'),
                          'symbols' => array('value' => 0,
                                             'error_message' => 'Password can\'t have symbols '));
              
    //Register sub-module password_changer_google  
    password_changer_api_register_submodule($system, $complexity);
    
    //Check that module is install
    $register_modules = password_changer_api_get_register_modules();
    
    $this->assertFalse(empty($register_modules),'There are modules register');
    
    $this->assertTrue(isset($register_modules['password_changer_google']), 'The sub-module password_changer_google is install.');

    //Uninstall module
    password_changer_api_unregister_submodule('password_changer_google');
  
    //Check that module is uninstall
    $register_modules = password_changer_api_get_register_modules();
    
    $this->assertTrue(empty($register_modules),'They are modules register');
    
    $this->assertFalse(isset($register_modules['password_changer_google']), 'The sub-module password_changer_google is install.');
  
   }
   
  
  //Test Case 2 - Check conflicts
  function testSubModuleRegistrationWithConflicts() {
    
     //Test Case 2.1 Registering Module
    $system = array( '#module_name' => 'password_changer_google',
                     '#title'       => 'Google System',
                     '#description' => 'Change Google password.',
                     '#optional_link' => 'https://www.google.com/a/employee.fhchs.edu',
                     '#must_change' => FALSE, );
    
    $complexity = array(  'max_length' => array( 'value' => 10,
                                                 'error_message' => 'The password maximum length should be eight.'),
                          'min_length' => array( 'value' => 4,
                                                 'error_message' => 'The password needs to be at least three character long.'),
                          'upper_case' => array( 'value' => 1,
                                                 'error_message' => 'The password needs at least one upper case letter.'),
                          'digit' => array('value' => 1,
                                          'error_message' => 'Password needs to have at least two digit.'),
                          'symbols' => array('value' => 0,
                                             'error_message' => 'Password can\'t have symbols '));
              
    password_changer_api_register_submodule($system, $complexity);
    
    //Check that module is register
    $register_modules = password_changer_api_get_register_modules();
    
    $this->assertTrue(isset($register_modules['password_changer_google']), 'The sub-module password_changer_google is install.');
    
    
    //Test Case 2.2 Register new sub-module password_changer_angel that will cause a conflict
    $system = array( '#module_name' => 'password_changer_angel',
                     '#title'       => 'Angel Learning System',
                     '#description' => 'Change password on the Angel Learning System.',
                     '#optional_link' => 'https://www.google.com/a/employee.fhchs.edu',
                     '#must_change' => TRUE, );
    
    $complexity = array( 'max_length' => array( 'value' => 12,
                                                'error_message' => 'The password maximum length should be eight.'),
                         'min_length' => array( 'value' => 2,
                                                'error_message' => 'The password needs to be at least three character long.'),
                         'upper_case' => array( 'value' => 1,
                                                 'error_message' => 'The password needs at least one upper case letter.'),
                         'digit' => array('value' => 0,
                                          'error_message' => 'Password needs to have at least two digit.'),
                         'symbols' => array('value' => -1,
                                          'error_message' => 'Password can\'t have symbols '));
    
    password_changer_api_register_submodule($system, $complexity);
    
    $register_modules = password_changer_api_get_register_modules();
    
    $this->assertFalse(empty($register_modules), 'They are register modules install.');
    
    $this->assertTrue(isset($register_modules['password_changer_angel']), 'The sub-module password_changer_angel is install.');
     
    //Should throw an error there is a conflict with password changer.
    try  {
      _password_changer_api_check_global_conflicts();
      $this->assertFalse(TRUE, 'Module did not have conflicts symbol conflict.');  
    }
    catch ( passwordChangerApiExeption $e) {
       password_changer_api_unregister_submodule('password_changer_angel');
      $this->assertTrue(TRUE, $e->getMessage());
    }
    //Check that module is unregistered
    $register_modules = password_changer_api_get_register_modules();
    $this->assertFalse(isset($register_modules['password_changer_angel']), 'The sub-module password_changer_angel is unregistered.');
    
    
    //Test Case 2.3 Register new sub-module password_changer_angel that will cause a conflict
    $system = array( '#module_name' => 'password_changer_angel',
                     '#title'       => 'Angel Learning System',
                     '#description' => 'Change password on the Angel Learning System.',
                     '#optional_link' => 'https://www.google.com/a/employee.fhchs.edu',
                     '#must_change' => TRUE, );
    
    $complexity = array( 'max_length' => array( 'value' => 2,
                                                'error_message' => 'The password maximum length should be eight.'),
                         'min_length' => array( 'value' => 3,
                                                'error_message' => 'The password needs to be at least three character long.'),
                         'upper_case' => array( 'value' => 1,
                                                 'error_message' => 'The password needs at least one upper case letter.'),
                         'digit' => array('value' => 0,
                                          'error_message' => 'Password needs to have at least two digit.'),
                         'symbols' => array('value' => 0,
                                          'error_message' => 'Password can\'t have symbols '));
    
    password_changer_api_register_submodule($system, $complexity);
    
    //Should throw an error there is a conflict with password changer.
    try  {
      _password_changer_api_check_global_conflicts();
      $this->assertFalse(TRUE, 'Module did not had a length conflict.');  
    }
    catch ( passwordChangerApiExeption $e) {
       password_changer_api_unregister_submodule('password_changer_angel');
      $this->assertTrue(TRUE, $e->getMessage());
    }
    //Check that module is unregistered
    $register_modules = password_changer_api_get_register_modules();
    $this->assertFalse(isset($register_modules['password_changer_angel']), 'The sub-module password_changer_angel is unregistered.');
    
     //Test Case 2.4 Register max value should be (4) and minimum value should be (4)
    $system = array( '#module_name' => 'password_changer_angel',
                     '#title'       => 'Angel Learning System',
                     '#description' => 'Change password on the Angel Learning System.',
                     '#optional_link' => 'https://www.google.com/a/employee.fhchs.edu',
                     '#must_change' => TRUE, );
    
    $complexity = array( 'max_length' => array( 'value' => 4,
                                                'error_message' => 'The password maximum length should be eight.'),
                         'min_length' => array( 'value' => 3,
                                                'error_message' => 'The password needs to be at least three character long.'));
    password_changer_api_register_submodule($system, $complexity);
    
    //Get register
    $register_modules = password_changer_api_get_register_modules();
    
    $min_maximum =  _password_changer_api_get_mim_maxlength($register_modules);
    $max_minimum  =  _password_changer_api_get_max_minlength($register_modules);
    
    $this->assertEqual(4, $min_maximum['value'], "Minimum maximum value is equal to 4 ");
    
    $this->assertEqual(4, $max_minimum['value'], "Maximum value is equal to 4 ");
    
    //Should throw an error there is a conflict with password changer.
    try  {
      _password_changer_api_check_global_conflicts();
      $this->assertTrue(TRUE, 'They are no conflicts in the register module.');  
    }
    catch ( passwordChangerApiExeption $e) {
       password_changer_api_unregister_submodule('password_changer_angel');
      $this->assertTrue(TRUE, $e->getMessage());
    }
  }
}


//Test Case 3.0 User Testing
class UserChangePasswordCase extends DrupalWebTestCase  {

  public static function getInfo() {
    return array(
      'name' => 'Password Changer API',
      'description' => 'Test user changing password.',
      'group' => 'Password Changer',
    );
  }
  
  function setUp() {
    
    //Test Case 3.1 password_changer_api.xlsx
    parent::setUp('password_changer_api', 'password_changer_google', 'password_changer_angel');
  
  }
  
  function testCreateUser() {
    
    //Test case 3.2 password_changer_api.xlsx
    $edit = array();
    $edit['name']   = 'test_user';
    $edit['mail']   = 'test_user@example.com';
    $edit['pass']   = 'Test*user1';
    $edit['status'] = 1;
    
    //Create user and set the raw password
    $account = user_save(drupal_anonymous_user(), $edit);
    $account->pass_raw = $edit['pass'];
    //Install password
    $this->assertTrue(!empty($account->uid), t('User created with name %name and pass %pass', array('%name' => $edit['name'], '%pass' => $edit['pass'])), t('User login'));
    
    //Login user
    $this->drupalLogin($account);
    
    //Get user edit profile form to change password
    $this->drupalGet('user/' .$account->uid. '/edit');
    $this->assertResponse(200, t('Application payment page content fail accessed.'));
    
    //Get user edit profile form and check if the options to change password in Google and Angel
    //Learning system are set.
    $this->assertText('Change Google password.', 'Google option to change password is display.');
    $this->assertText('Change password on the Angel Learning System.', 'Angel Learning system to change password is display');
  }
  
  
  function testCaseChangeUserPasswordFails() {
    
     //Test case 3.3 password_changer_api.xlsx
    $edit = array();
    $edit['name']   = 'test_user';
    $edit['mail']   = 'test_user@example.com';
    $edit['pass']   = 'Test*user1';
    $edit['status'] = 1;
    
    //Create user and set the raw password
    $account = user_save(drupal_anonymous_user(), $edit);
    $account->pass_raw = $edit['pass'];
    //Install password
    $this->assertTrue(!empty($account->uid), t('User created with name %name and pass %pass', array('%name' => $edit['name'], '%pass' => $edit['pass'])), t('User login'));
    
    //Login user
    $this->drupalLogin($account);
    
    //Get user edit profile form to change password
    $this->drupalGet('user/' .$account->uid. '/edit');
    $this->assertResponse(200, t('Application payment page content fail accessed.'));
    
    //Check modules have been install
    $this->assertText('Change Google password.', 'Google option to change password is display.');
    $this->assertText('Change password on the Angel Learning System.', 'Angel Learning system to change password is display');
    
    //Try to change password to Test*user1
    $this->drupalPost('user/' .$account->uid. '/edit', array( 'current_pass' => 'Test*user1', 'pass[pass1]'=> 'test*user', 'pass[pass2]' => 'test*user'), t('Save'));
    $this->assertText('Password is longer', 'Password has not been change.');
    
    
    //Test case 3.4
    $this->drupalPost('user/' .$account->uid. '/edit', array( 'current_pass' => 'Test*user1', 'pass[pass1]'=> 'test', 'pass[pass2]' => 'test'), t('Save'));
    $this->assertText('Password needs to have at least two digit', 'Password has not been change.');
    
     //Test case 3.5
    $this->drupalPost('user/' .$account->uid. '/edit', array( 'current_pass' => 'Test*user1', 'pass[pass1]'=> 'my_test_password_changer', 'pass[pass2]' => 'my_test_password_changer'), t('Save'));
    $this->assertText('Password is longer', 'Password has not been change.');
    
    //Test case 3.6
    $this->drupalPost('user/' .$account->uid. '/edit', array( 'current_pass' => 'Test*user1', 'pass[pass1]'=> 'test12', 'pass[pass2]' => 'test12'), t('Save'));
    $this->assertText('The changes have been saved.', 'Password has been change.');
  }
  
}

//Test Case 1.5
class PasswordChangerAPISettingsCase extends DrupalWebTestCase  {
  
  public static function getInfo() {
    return array(
      'name' => 'Password Changer API Settings',
      'description' => 'Test Password Changer API Settings.',
      'group' => 'Password Changer',
    );
  }
  
  function setUp() {
    
    //Test Case 3.1 password_changer_api.xlsx
    parent::setUp('password_changer_api');
    
     //Create user and login
    $this->admin_user = $this->drupalCreateUser(array('administer password changer'));
    $this->drupalLogin($this->admin_user);
  
  }
  
  
   //Test Case 1.5
   //Set admin message for user
   function testSetAdminSettingMessage() {
         
    //Access configuration page
    $this->drupalGet('admin/config/password_changer');
    $this->assertResponse(200, t('Access registration page successfully.'));
    $this->assertText(t('Password Changer API Settings'), t('Page title is Password Changer API Settings'));

     //Create role
     $this->drupalPost('admin/config/password_changer',
                       array('admin_message' => 'This is a test message'),
                       t('Save Message'));
     
     //Check if message was posted
     $this->assertText('This message would display in the form were the user changes his/her password (user profile form)',
                       'Administrator message has been set successfully.');
    
   }
   
}



//Test Case 1.6
class PasswordChangerAPIUserWithAccountInNoSystemCase extends DrupalWebTestCase  {
  
  public static function getInfo() {
    return array(
      'name' => 'Password Changer API',
      'description' => 'Test password change with no system to change.',
      'group' => 'Password Changer',
    );
  }
  
  function setUp() {
    
    //Test Case 3.1 password_changer_api.xlsx
    parent::setUp('password_changer_api');
    
     //Getting roles and indexing them by name
    $this->role_by_name = array_flip(user_roles());
    
    //Set user values
    $edit['name']   = 'n4lb64';
    $edit['mail']   = 'n4lb64' . '@example.com';
    $edit['roles']  = array($this->role_by_name['authenticated user'] => 'authenticated user');
    $edit['pass']   = 'test34';
    $edit['status'] = 1;
    //Creat user
    $account = user_save('', $edit);
    $account->pass_raw = $edit['pass'];
    $this->authenticated_user  = $account;
    
    $this->assertTrue(!empty($account->uid), t('User created with name %name and pass %pass', array('%name' => $edit['name'], '%pass' => $edit['pass'])), t('User login'));
      
  }
  
  
   //Test Case 1.6
   //Set admin message for user
   function testSetAdminSettingMessage() {
    
    $this->drupalLogin($this->authenticated_user);
         
    //Access configuration page
    $this->drupalGet('user/' . $this->authenticated_user->uid . '/edit');
    //Change password
    $this->drupalPost('user/' . $this->authenticated_user->uid . '/edit', array('current_pass' => 'test34',
                                                                        'pass[pass1]' => 'test12', 'pass[pass2]' => 'test12'),t('Save'));
    //Check if password was chaged.
    $this->assertText('The changes have been saved', 'Password has been change successfuly in Drupal');
    
   }
   
}   


